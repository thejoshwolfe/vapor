const Box2D = window.Box2D
const b2Vec2 = Box2D.Common.Math.b2Vec2
const b2BodyDef = Box2D.Dynamics.b2BodyDef
const b2Body = Box2D.Dynamics.b2Body
const b2FixtureDef = Box2D.Dynamics.b2FixtureDef
const b2World = Box2D.Dynamics.b2World
const b2DebugDraw = Box2D.Dynamics.b2DebugDraw
const b2AABB = Box2D.Collision.b2AABB
const b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape
const b2CircleShape = Box2D.Collision.Shapes.b2CircleShape

const chem = require("chem")
const Map = require("./map.co")
const Entity = require("./entity.co")
const Man = require("./man.co")

const entity_classes =
  Man: Man
  Blob: class Blob extends Entity
    body_type: b2Body.b2_kinematicBody
    yike_time: 500
    yike_cooldown: 100
    knockback_power: 20
    ->
      @normal_sprite = new chem.Sprite "blob_normal"
      @yikes_sprite = new chem.Sprite "blob_yikes"
      @yiking_start = null
    get_shape: -> new b2CircleShape 1
    get_sprite: ->
      if @yiking_start? and new Date! - @yiking_start < @yike_time then @yikes_sprite else @normal_sprite

map = null
let
  waiting_events = []
  create_wait_condition = (name) ->
    index = waiting_events.length
    waiting_events.push name
    !->
      waiting_events[index] = null
      done = true
      list = document.getElementById "loading-list"
      list.innerHTML = ""
      for event_name of waiting_events
        continue unless event_name?
        item = document.createElement "li"
        item.innerHTML = event_name
        list.appendChild item
        done = false
      if done
        document.getElementById("loading").setAttribute "style", "display:none;"
        init!

  chem.onReady create_wait_condition "sprites"

  map_is_ready = create_wait_condition "map"
  request = new XMLHttpRequest!
  request.onreadystatechange = !->
    return unless request.readyState is 4 and request.status is 200
    map := Map.parse request.responseText, create_wait_condition
    map_is_ready!
  request.open "GET", "test.tmx", true
  request.send!

init = ->
  const canvas = document.getElementById "game"
  const canvas_center = chem.vec2d canvas.getAttribute("width")/2, canvas.getAttribute("height")/2
  const engine = new chem.Engine canvas
  const standard_gravity = new b2Vec2 0, 30

  const fpsLabel = engine.createFpsLabel!

  engine.buttonCaptureExceptions[chem.button.KeyCtrl] = true
  engine.buttonCaptureExceptions[chem.button["KeyF" + i]] = true for i from 1 to 10

  sounds =
    bchs: new chem.Sound "sfx/bchs.ogg"
  buttons =
    left: chem.button.KeyA
    right: chem.button.KeyD
    crouch: chem.button.KeyS
    jump: chem.button.KeyK
    pew: chem.button.KeyJ
    debug: chem.button.KeyGrave

  # GIMME THE FIZZAQS!
  const view_scale = map.scale
  world = null
  gravity_zones = []
  debug_drawing = false
  man = null
  entities = []
  creeps = []
  window._debug_man = man
  let
    world := new b2World new b2Vec2(), true

    debug_drawer = new b2DebugDraw()
    # disable white background
    debug_drawer.m_sprite.graphics.clear = ->
    debug_drawer.SetSprite canvas.getContext "2d"
    debug_drawer.SetDrawScale view_scale
    debug_drawer.SetFillAlpha 0.5
    debug_drawer.SetLineThickness 1
    debug_drawer.SetFlags b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit
    world.SetDebugDraw debug_drawer

    # create the room
    do
      # we're going to group horizontal tile neighbors into single rectangular fixtures because:
      #   it prevents you from bumping along the corners in the ground. see e5022e9137d1b81442d7049e0ff7d4d2d25ab679
      #   it's more efficient?
      #   it's pretty easy to implement
      fixture_def = new b2FixtureDef!
      fixture_def.density = 1.0
      fixture_def.friction = 0.5
      fixture_def.restitution = 0
      fixture_def.shape = new b2PolygonShape!
      stretch_floor_start = null
      stretch_floor_end = null
      flush_strech_floor = ->
        return unless stretch_floor_start?
        body_def = new b2BodyDef!
        body_def.type = b2Body.b2_staticBody
        body_def.position.x = (stretch_floor_start.x + stretch_floor_end.x) / 2
        body_def.position.y = (stretch_floor_start.y + stretch_floor_end.y) / 2
        fixture_def.shape.SetAsBox(
          (stretch_floor_end.x - stretch_floor_start.x) / 2
          (stretch_floor_end.y - stretch_floor_start.y) / 2
        )
        world.CreateBody(body_def).CreateFixture fixture_def
        stretch_floor_start := null
      # create walls from the map
      for row, y of map.physics_layer
        for value, x of row
          if value is not 0
            if not stretch_floor_start?
              stretch_floor_start := new b2Vec2 x, y
            stretch_floor_end := new b2Vec2 x+1, y+1
          else
            flush_strech_floor!
        flush_strech_floor!
      for object of map.objects
        aabb = make_aabb(
          object.x / map.scale
          object.y / map.scale
          (object.x + object.width) / map.scale
          (object.y + object.height) / map.scale
        )
        switch object.type
          case \gravity
            gravity_zones.push(
              scale: parseFloat object.properties.gravity_scale
              priority: parseFloat object.properties.priority
              aabb: aabb
            )
          case \entity
            make_entity aabb, object.properties
      gravity_zones.sort operator_comparator \priority

      !function make_entity(aabb, opts)
        entity = new (entity_classes[opts.class])
        entity.init world, aabb, opts
        entities.push entity
        if entity instanceof Man
          man := entity
        else
          creeps.push entity


  engine.on 'update', (dt, dx) ->

    debug_drawing := !debug_drawing if engine.buttonJustPressed buttons.debug

    let
      ground_sensor = man.get_ground_sensor!
      man.is_grounded = false
      visitContacts man.body, !(fixture) ->
        if fixture is ground_sensor
          man.is_grounded = true

    creeps.forEach (creep) ->
      contact_normal = null
      visitContacts creep.body, (fixture, contact, normal_direction) ->
        if fixture is man.fixture
          contact_normal := chem.vec2d(contact.GetManifold().m_localPlaneNormal).scale(normal_direction)
      if new Date! - creep.yiking_start >= creep.yike_time + creep.yike_cooldown
        creep.yiking_start = null
      if contact_normal? and not creep.yiking_start?
        creep.yiking_start = new Date!
        man.ouching_start = new Date!
        # apply knockback
        man.body.ApplyImpulse contact_normal.scaled(-creep.knockback_power), man.body.GetPosition!

    is_ouching = man.ouching_start? and new Date! - man.ouching_start < man.ouch_time
    if is_ouching
      man.is_grounded = false

    man.is_crouching = is_ouching or engine.buttonState buttons.crouch

    # adjust bounding box for crouching/standing
    if man.was_crouching is not man.is_crouching
      # stand up / crouch down
      man.refresh_shape!
      man.ground_sensors[1].m_shape = man.get_ground_sensor_shape 1
      man.ground_sensors[-1].m_shape = man.get_ground_sensor_shape -1
      man.reset_mass!
      if man.is_crouching and man.is_grounded
        # stick to the ground when entering a crouch
        position = man.body.GetPosition!.Copy!
        position.y += man.gravity_direction * (man.standing_half_height - man.crouching_half_height)
        man.body.SetPosition position

    man_velocity = man.body.GetLinearVelocity!

    # left/right
    horizontal_intention = 0
    horizontal_intention-- if engine.buttonState buttons.left
    horizontal_intention++ if engine.buttonState buttons.right
    magic_max_velocity = horizontal_intention * man.max_speed
    if horizontal_intention * man_velocity.x < horizontal_intention * magic_max_velocity
      # magic acceleration
      man.body.ApplyImpulse new b2Vec2(2.0 * horizontal_intention, 0), man.body.GetPosition!

    # ground friction with no horizontal intention
    if man.is_grounded and horizontal_intention is 0
      if not man.was_grounded
        # when landing, stop suddenly.
        man.body.SetLinearVelocity x: 0, y: 0
      else
        # slow a run
        get_horizontal_direction = -> sign man_velocity.x
        direction = get_horizontal_direction!
        if direction is not 0
          man.body.ApplyImpulse new b2Vec2(-2.0 * direction, 0), man.body.GetPosition!
          # if we overshot 0, snap to 0
          new_direction = get_horizontal_direction!
          if new_direction is not 0 and new_direction is not direction
            man.body.SetLinearVelocity x: 0, y: 0

    # notice gravity zones in priority order
    gravity = standard_gravity.Copy!
    for {scale, aabb} of gravity_zones by -1
      if aabb_contains_point aabb, man.body.GetPosition!
        gravity.Multiply scale
        break
    gravity.Multiply man.body.GetMass!
    man.body.ApplyForce gravity, man.body.GetPosition!

    # JOMP!
    gravity_direction = sign gravity.y
    if man.gravity_direction is not gravity_direction
      # sorry. turn off jumping mechanics through gravity changes
      man.is_jumping = false
    if gravity_direction is 0
      # maintain last gravity_direction in zero-g
      gravity_direction = man.gravity_direction
    man.gravity_direction = gravity_direction
    if man.is_grounded and engine.buttonJustPressed buttons.jump
      jump_impulse = man.jump_impulse.Copy!
      jump_impulse.y *= gravity_direction
      man.body.ApplyImpulse jump_impulse, man.body.GetPosition!
      man.is_jumping = true
    if man.is_jumping
      jump_stop = gravity_direction * man.jump_stop
      if gravity_direction * man_velocity.y < gravity_direction * jump_stop
        # still jumping
        if not engine.buttonState buttons.jump
          # just let go of jump button. interrupt the jump.
          man_velocity.y = jump_stop
          man.is_jumping = false
      else
        # past the point where jumping is meaningful. now it's just falling.
        man.is_jumping = false

    # pew pew
    if engine.buttonJustPressed buttons.pew
      sounds.bchs.play!

    # update sprite
    man.facing_direction = horizontal_intention if horizontal_intention is not 0
    for entity of entities
      sprite = entity.get_sprite!
      sprite.scale.x = entity.facing_direction
      sprite.scale.y = entity.gravity_direction
      entity.body.SetUserData sprite

    world.Step dt, 10, 10
    world.ClearForces!
    man.was_grounded = man.is_grounded
    man.was_crouching = man.is_crouching

  world_to_canvas = ->
    in_pixels = chem.vec2d(it).scale(view_scale)
    # snap to integer pixels to prevent seeing cracks between tiles
    in_pixels.floor!
    return in_pixels
  get_view_aabb = ->
    position = man.body.GetPosition!
    make_aabb(
      position.x - canvas_center.x / view_scale
      position.y - canvas_center.y / view_scale
      position.x + canvas_center.x / view_scale
      position.y + canvas_center.y / view_scale
    )

  engine.on 'draw', (context) ->
    # clear canvas to black
    context.fillStyle = '#000000'
    context.fillRect 0, 0, engine.size.x, engine.size.y
    context.save!
    let center = world_to_canvas(chem.vec2d man.body.GetPosition!).sub canvas_center
      context.translate -center.x, -center.y

    if debug_drawing
      world.DrawDebugData!
    else
      # draw the map first
      view_aabb = get_view_aabb!
      map.draw_tiles context, view_aabb

      # figure out which bodies to draw
      sprite_batch = new chem.Batch!
      query_aabb world, view_aabb, (fixture) ->
        body = fixture.GetBody!
        sprite = body.GetUserData!
        if sprite instanceof chem.Sprite
          # set the positions of sprite
          sprite.pos = world_to_canvas body.GetPosition!
          sprite_batch.add sprite
        body = body.m_next

      # draw the sprites in front of the above walls
      sprite_batch.draw context

    context.restore!
    # draw a little fps counter in the corner
    fpsLabel.draw context
    context.fillStyle = '#ffffff'
    context.fillText "grounded = #{man.is_grounded}", 100, canvas_center.y * 2
    context.fillText "jumping = #{man.is_jumping}", 200, canvas_center.y * 2

  engine.start!
  canvas.focus!


function compare(a, b)
  if a < b then -1 else if a > b then 1 else 0

function sign(n)
  compare(n, 0)

function operator_comparator(property_name)
  (a, b) -> compare a[property_name], b[property_name]

# ugh. make this api more coffee-like
function query_aabb(world, aabb, callback)
  # callback should be the last parameter
  actual_callback = (fixture) ->
    # invert the return value, so that the default case continues
    !callback fixture
  world.QueryAABB callback, aabb

# couldn't find an existing function for this, so here's my version
function aabb_contains_point(aabb, point)
  ( aabb.lowerBound.x <= point.x and point.x < aabb.upperBound.x and
    aabb.lowerBound.y <= point.y and point.y < aabb.upperBound.y )

function make_aabb(x1, y1, x2, y2)
  result = new b2AABB!
  result.lowerBound.x = x1
  result.lowerBound.y = y1
  result.upperBound.x = x2
  result.upperBound.y = y2
  result

!function visitContacts(body, cb)
  contact_edge = body.GetContactList!
  while contact_edge
    contact = contact_edge.contact
    if contact.IsTouching!
      cb contact.GetFixtureA!, contact, 1
      cb contact.GetFixtureB!, contact, -1
    contact_edge = contact_edge.next

